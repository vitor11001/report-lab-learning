from _pdf_base import _PDFBase, BASE_DIR
from paragraph_style_gota import ParagraphStylesGota
from reportlab.lib.styles import getSampleStyleSheet
from copy import deepcopy
from reportlab.platypus import Paragraph, Spacer, Table, TableStyle, PageBreak, Image
from reportlab.lib.units import cm
from reportlab.lib import colors
import textwrap
import os


class CertificateWithoutHumidity(_PDFBase):
    """
    Modelo de dados para o certificado sem umidade.
    """
    filename: str = "certificado_sem_umidade.pdf"

    @classmethod
    def content_to_pdf(cls) -> list:
        normal_left = ParagraphStylesGota.normal_left()
        normal_right = ParagraphStylesGota.normal_right()
        normal_adjusted = ParagraphStylesGota.normal_adjusted()
        normal_left_bold = ParagraphStylesGota.normal_left_bold()
        normal_center_bold = ParagraphStylesGota.normal_center_bold()
        title = ParagraphStylesGota.title()
        label_bold_and_value_normal_left = ParagraphStylesGota.paragraph_label_bold_value_normal_left
        max_width_for_table = cls.PageBase.page_width - cls.PageBase.left_margin - cls.PageBase.right_margin

        flowables = []
        
        flowables.append(Paragraph("Certificado de Calibra√ß√£o N¬∞ 2290", title))
        flowables.append(Paragraph("Ref. Norma: 04_00", normal_right))
        flowables.append(cls.ElementsPage.line_between_text)
        # flowables.append(Spacer(1, 0.2 * cm))

        # Bloco: Solicitante
        flowables.append(label_bold_and_value_normal_left("Solicitante:", "Hemorio"))
        flowables.append(label_bold_and_value_normal_left("Endere√ßo:", "Rua Frei Caneca, 8 - Centro, Rio de Janeiro - RJ, 20211-030"))
        flowables.append(label_bold_and_value_normal_left("Objeto de calibra√ß√£o:", "Term√¥metro"))
        flowables.append(label_bold_and_value_normal_left("Marca:", "Senfio"))
        flowables.append(label_bold_and_value_normal_left("Modelo:", "EXPLORER"))
        flowables.append(label_bold_and_value_normal_left("N¬∫ de s√©rie:", "0637"))

        flowables.append(cls.ElementsPage.line_between_text)

        # Bloco: Dados da calibra√ß√£o
        dados_calibracao = [
            Paragraph("Dados da calibra√ß√£o", normal_left_bold),
            Paragraph("Data da calibra√ß√£o: 23/05/2024", normal_left),
            Paragraph("Data emiss√£o: 24/04/2025", normal_left),
            Paragraph("Local: Senfio Solu√ß√µes Tecnol√≥gicas", normal_left),
        ]

        # Bloco: Condi√ß√µes ambientais
        condicoes_ambientais = [
            Paragraph("Condi√ß√µes ambientais", normal_left_bold),
            Paragraph("Temperatura: (26,0 ¬± 1,0)¬∞C", normal_left),
        ]

        # Tabela com duas colunas
        tabela = Table(
            data=[[dados_calibracao, condicoes_ambientais]],
            colWidths=[10 * cm, 7 * cm],  # ajuste conforme necess√°rio
            hAlign='LEFT'
        )

        # Estilo: alinhamento no topo, sem bordas
        tabela.setStyle(TableStyle([
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Alinha conte√∫do verticalmente ao topo
            ('LEFTPADDING', (0, 0), (-1, -1), 0),  # Remove espa√ßamento √† esquerda
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),  # Pequeno espa√ßo √† direita
            ('TOPPADDING', (0, 0), (-1, -1), 0),   # Sem padding superior
            ('BOTTOMPADDING', (0, 0), (-1, -1), 0),
            ('BOX', (0, 0), (-1, -1), 0, colors.white),  # Sem bordas
            ('INNERGRID', (0, 0), (-1, -1), 0, colors.white),
        ]))

        flowables.append(tabela)

        flowables.append(cls.ElementsPage.line_between_text)

        flowables.append(Paragraph("Procedimentos", normal_left_bold))
        text_proceed = textwrap.dedent("""\
            A calibra√ß√£o foi conduzida em um meio termost√°tico com incerteza conhecida, onde foram realizadas 
            5 medi√ß√µes em cada ponto. Neste certificado foi representado o valor m√©dio dessas 5 medi√ß√µes. 
            Todas as instru√ß√µes foram executadas conforme o documento interno Norma-04 da Senfio.
        """)
        flowables.append(Paragraph(text_proceed, normal_adjusted))
        flowables.append(Spacer(1, 0.3 * cm))

        # Bloco: Padr√£o utilizado
        flowables.append(Paragraph("Padr√£o utilizado na calibra√ß√£o", normal_left_bold))
        flowables.append(Paragraph("Descri√ß√£o: Termohigr√¥metro", normal_left))
        flowables.append(Paragraph("Modelo: Explorer", normal_left))
        flowables.append(Paragraph("Marca: Senfio", normal_left))
        flowables.append(Paragraph("Faixa de uso: -100¬∞C a 100¬∞C", normal_left))
        flowables.append(Paragraph("Certificado de Calibra√ß√£o do Padr√£o: 7XVH1M24", normal_left))
        flowables.append(Paragraph("Data da Calibra√ß√£o: 23/01/2025", normal_left))
        flowables.append(Paragraph("N√∫mero de s√©rie: 0112", normal_left))
        flowables.append(Paragraph("Resolu√ß√£o: 0,1¬∞C", normal_left))

        flowables.append(cls.ElementsPage.line_between_text)

        # Bloco: Tabela de resultados
        flowables.append(label_bold_and_value_normal_left("Resultados:", "Temperatura"))

        table_data = [
            [
                Paragraph("VVC (Valor Verdadeiro Convencional)", normal_center_bold),
                Paragraph("VML (Valor M√©dio das Leituras)", normal_center_bold),
                Paragraph("Erro<br/>(VML-VVC)", normal_center_bold),
                Paragraph("Incerteza combinada<br/>(Uc)", normal_center_bold),
                Paragraph("Fator de abrang√™ncia<br/>(K)", normal_center_bold),
                Paragraph("Incerteza expandida<br/>(Ue)", normal_center_bold),
            ],
            [
                Paragraph("(¬∞C)", normal_center_bold),
                Paragraph("(¬∞C)", normal_center_bold),
                Paragraph("(¬∞C)", normal_center_bold),
                Paragraph("(¬∞C)", normal_center_bold),
                Paragraph("", normal_center_bold),
                Paragraph("(¬∞C)", normal_center_bold),
            ],
            ["-20,00", "-21,13", "-1,13", "0,34", "2,00", "0,68"],
            ["0,00", "-0,47", "-0,47", "0,34", "2,00", "0,68"],
            ["20,00", "19,77", "-0,23", "0,34", "2,00", "0,68"],
        ]

        col_widths = [
            0.2*max_width_for_table, 
            0.16*max_width_for_table, 
            0.16*max_width_for_table, 
            0.16*max_width_for_table, 
            0.16*max_width_for_table, 
            0.16*max_width_for_table
        ]

        table = Table(table_data, colWidths=col_widths, hAlign="LEFT")

        table.setStyle(TableStyle([
            # Apenas linhas verticais
            ("LINEBEFORE", (1, 0), (-1, -1), 0.5, colors.HexColor("#d0f0f8")),

            # Background apenas na linha 1 (√≠ndice 0) e linha 3 (√≠ndice 2)
            ("BACKGROUND", (0, 1), (-1, 1), colors.HexColor("#d0f0f8")),
            ("BACKGROUND", (0, 3), (-1, 3), colors.HexColor("#d0f0f8")),

            # Centraliza o conte√∫do
            ("ALIGN", (0, 0), (-1, -1), "CENTER"),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
        ]))

        flowables.append(table)

        flowables.append(PageBreak()) # üëâ quebra de p√°gina aqui!
        
        # Resumo
        flowables.append(Paragraph("Resumo", normal_left_bold))

        table_data = [
            [
                Paragraph("VVC", normal_center_bold),
                Paragraph("Medi√ß√£o final", normal_center_bold),
            ],
            [
                Paragraph("(¬∞C)", normal_center_bold),
                Paragraph("(¬∞C)", normal_center_bold),
            ],
            ["-20,00", "-21,13 com Uc = 0,34"],
            ["0,00", "-0,47 com Uc = 0,34"],
            ["20,00", "19,77 com Uc = 0,34"],
        ]

        col_widths = [
            0.25*max_width_for_table, 
            0.75*max_width_for_table, 
        ]

        table = Table(table_data, colWidths=col_widths, hAlign="LEFT")

        table.setStyle(TableStyle([
            # Apenas linhas verticais
            ("LINEBEFORE", (1, 0), (-1, -1), 0.5, colors.HexColor("#d0f0f8")),

            # Background apenas na linha 1 (√≠ndice 0) e linha 3 (√≠ndice 2)
            ("BACKGROUND", (0, 1), (-1, 1), colors.HexColor("#d0f0f8")),
            ("BACKGROUND", (0, 3), (-1, 3), colors.HexColor("#d0f0f8")),

            # Centraliza o conte√∫do
            ("ALIGN", (0, 0), (-1, -1), "CENTER"),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
        ]))

        flowables.append(table)

        flowables.append(Spacer(1, 0.3 * cm))
        flowables.append(Paragraph("Observa√ß√µes:", normal_left_bold))

        # Corpo do texto, usando HTML b√°sico para formata√ß√£o
        obs_text_1 = """
        <b>1)</b> As componentes de incerteza consideradas neste certificado englobam al√©m da incerteza das pr√≥prias medi√ß√µes, a resolu√ß√£o digital do mostrador do padr√£o e sua estabilidade t√©rmica.<br/>
        """
        obs_text_2 = """
        <b>2)</b> Este certificado se aplica somente ao instrumento calibrado.<br/>
        """
        obs_text_3 = """
        <b>3)</b> Sua utiliza√ß√£o para fins promocionais depende de pr√©via autoriza√ß√£o formal da Senfio. Sua reprodu√ß√£o s√≥ pode ser realizada integralmente, sem nenhuma altera√ß√£o.<br/>
        """
        obs_text_4 = """
        <b>4)</b> A incerteza da calibra√ß√£o (incerteza expandida) √© baseada em um fator de abrang√™ncia K, para um n√≠vel de confian√ßa de 95,45%.
        """

        flowables.append(Paragraph(obs_text_1, normal_adjusted))
        flowables.append(Paragraph(obs_text_2, normal_adjusted))
        flowables.append(Paragraph(obs_text_3, normal_adjusted))
        flowables.append(Paragraph(obs_text_4, normal_adjusted))

        flowables.append(Spacer(1, 1 * cm))
        
        # Bloco: Assinatura
        img = Image(os.path.join(BASE_DIR, "images", "assignElyr.png"), width=5 * cm, height=2 * cm)
        img.hAlign = 'CENTER'

        flowables.append(img)

        return flowables


if __name__ == "__main__":
    pdf = CertificateWithoutHumidity()
    pdf.generate_pdf()
